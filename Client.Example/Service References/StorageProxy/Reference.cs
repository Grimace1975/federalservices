//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4918
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.StorageProxy {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StorageProxy.IStorageService")]
    public interface IStorageService {
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://neurox.local) of message SetServiceNodeStateRequest does not match the default value (http://tempuri.org/)
        [System.ServiceModel.OperationContractAttribute(Action="http://neurox.local/IStorageClient/SetServiceNodeState", ReplyAction="http://neurox.local/IStorageClient/SetServiceNodeStateResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Federal.Storage.ServiceRegistration))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Federal.Storage.ServiceEntityBase[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Federal.Storage.ServiceEntityBase))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Example.Storage.Entity.ProcessEntity))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Example.Storage.Entity.SensorEntity))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Federal.Storage.ServiceNodeState))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(int[]))]
        Client.StorageProxy.SetServiceNodeStateResponse SetServiceNodeState(Client.StorageProxy.SetServiceNodeStateRequest request);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://neurox.local) of message GetRegisteredServiceRequest does not match the default value (http://tempuri.org/)
        [System.ServiceModel.OperationContractAttribute(Action="http://neurox.local/IStorageServiceBase/GetRegisteredService", ReplyAction="http://neurox.local/IStorageServiceBase/GetRegisteredServiceResponse")]
        Client.StorageProxy.GetRegisteredServiceResponse GetRegisteredService(Client.StorageProxy.GetRegisteredServiceRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetServiceNodeState", WrapperNamespace="http://neurox.local", IsWrapped=true)]
    public partial class SetServiceNodeStateRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://neurox.local", Order=0)]
        public int nodeType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://neurox.local", Order=1)]
        public int id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://neurox.local", Order=2)]
        public Federal.Storage.ServiceNodeState nodeState;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://neurox.local", Order=3)]
        public object context;
        
        public SetServiceNodeStateRequest() {
        }
        
        public SetServiceNodeStateRequest(int nodeType, int id, Federal.Storage.ServiceNodeState nodeState, object context) {
            this.nodeType = nodeType;
            this.id = id;
            this.nodeState = nodeState;
            this.context = context;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetServiceNodeStateResponse", WrapperNamespace="http://neurox.local", IsWrapped=true)]
    public partial class SetServiceNodeStateResponse {
        
        public SetServiceNodeStateResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRegisteredService", WrapperNamespace="http://neurox.local", IsWrapped=true)]
    public partial class GetRegisteredServiceRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://neurox.local", Order=0)]
        public string entityType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://neurox.local", Order=1)]
        public string name;
        
        public GetRegisteredServiceRequest() {
        }
        
        public GetRegisteredServiceRequest(string entityType, string name) {
            this.entityType = entityType;
            this.name = name;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRegisteredServiceResponse", WrapperNamespace="http://neurox.local", IsWrapped=true)]
    public partial class GetRegisteredServiceResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://neurox.local", Order=0)]
        public Federal.Storage.ServiceRegistration GetRegisteredServiceResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://neurox.local", Order=1)]
        public Federal.Storage.ServiceEntityBase[] entities;
        
        public GetRegisteredServiceResponse() {
        }
        
        public GetRegisteredServiceResponse(Federal.Storage.ServiceRegistration GetRegisteredServiceResult, Federal.Storage.ServiceEntityBase[] entities) {
            this.GetRegisteredServiceResult = GetRegisteredServiceResult;
            this.entities = entities;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IStorageServiceChannel : Client.StorageProxy.IStorageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class StorageServiceClient : System.ServiceModel.ClientBase<Client.StorageProxy.IStorageService>, Client.StorageProxy.IStorageService {
        
        public StorageServiceClient() {
        }
        
        public StorageServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StorageServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StorageServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StorageServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.StorageProxy.SetServiceNodeStateResponse Client.StorageProxy.IStorageService.SetServiceNodeState(Client.StorageProxy.SetServiceNodeStateRequest request) {
            return base.Channel.SetServiceNodeState(request);
        }
        
        public void SetServiceNodeState(int nodeType, int id, Federal.Storage.ServiceNodeState nodeState, object context) {
            Client.StorageProxy.SetServiceNodeStateRequest inValue = new Client.StorageProxy.SetServiceNodeStateRequest();
            inValue.nodeType = nodeType;
            inValue.id = id;
            inValue.nodeState = nodeState;
            inValue.context = context;
            Client.StorageProxy.SetServiceNodeStateResponse retVal = ((Client.StorageProxy.IStorageService)(this)).SetServiceNodeState(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.StorageProxy.GetRegisteredServiceResponse Client.StorageProxy.IStorageService.GetRegisteredService(Client.StorageProxy.GetRegisteredServiceRequest request) {
            return base.Channel.GetRegisteredService(request);
        }
        
        public Federal.Storage.ServiceRegistration GetRegisteredService(string entityType, string name, out Federal.Storage.ServiceEntityBase[] entities) {
            Client.StorageProxy.GetRegisteredServiceRequest inValue = new Client.StorageProxy.GetRegisteredServiceRequest();
            inValue.entityType = entityType;
            inValue.name = name;
            Client.StorageProxy.GetRegisteredServiceResponse retVal = ((Client.StorageProxy.IStorageService)(this)).GetRegisteredService(inValue);
            entities = retVal.entities;
            return retVal.GetRegisteredServiceResult;
        }
    }
}
